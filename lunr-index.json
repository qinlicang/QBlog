[
    {
        "uri": "/EMS设计文档",
        "content": "EMS设计文档\n\n 文档目的\n\n本文档主要用于实现EMS（eSE Management Service）设计及相关模块调用流程。\n\n系统框架\n\n主要相关模块：PMClient、WIFI、VPN、Debug，其中EMS模块为一个服务进程，向下和eSE通信，向上和PMClient等进程通信，需要做到访问互斥，调用者权限判断等。\n\n 通信方式\n\n通信使用message queue\n\n如何判断是对应的 进程访问，通过创建消息队列的参数，并且消息内容是加密的，为了使用同一个消息队列，两面用的msgid，必须用统一的方式生成，加入对进程名称和ID的验证来判断调用者的身份。\n\n需要给各个调用模块提供调用封装库\n\nEMS接口\n\n PMClient\n\n接口\n\nsetWifiPassword()\nsetVPNInfo(char* vpninfo)//所有vpn信息的json数组\nstartVPN(char* vpnid)\ngetToken()\nwriteToken\ngetCommKey 这是和SY暂时不用，因为需要SY服务器修改\n\n WIFI接口\n\n流程图\n\n 接口\n\nint checkWifiPassword(char* pwd)\n\nVPN接口\n\nvpn是 由EMS调用起来的，将和服务器连接的信息作为参数传递过去。\n\n Debug\n\n该模块需要和西安讨论后，确定流程后再确定接口\n\n",
        "tags": []
    },
    {
        "uri": "/post/test",
        "content": "---\ntitle: \"Test\"\nCategories: [\"hugo\"]\nTags: [\"hugo\", \"博客\"]\nDescription: \"\"\ndate: 2020-08-13T13:50:45+08:00\ndraft: true\n---\n\n快速开始\n\n 安装Hugo\n\n1. 二进制安装（推荐：简单、快速）\n\n到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）\n\nMac下直接使用 Homebrew 安装：\n\nsudo apt-get install hugo\n\n 2. 源码安装\n\n源码编译安装，首先安装好依赖的工具：\n\nGit\nMercurial\nGo 1.3+ (Go 1.4+ on Windows)\n\n设置好 GOPATH 环境变量，获取源码并编译：\n\n$ export GOPATH=$HOME/go\n$ go get -v github.com/spf13/hugo\n\n源码会下载到 $GOPATH/src 目录，二进制在 $GOPATH/bin/\n\n如果需要更新所有Hugo的依赖库，增加 -u 参数：\n\n$ go get -u -v github.com/spf13/hugo\n\n生成站点\n\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n$ hugo new site QBlog\n\n这样就在 /path/to/site 目录里生成了初始站点，进去目录：\n\n$ cd QBlog\n\n站点目录结构：\n\n  ▸ archetypes/\n  ▸ content/\n  ▸ layouts/\n  ▸ static/\n    config.toml\n\n 创建文章\n\n创建一个 about 页面：\n\n$ hugo new about.md\n\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ntitle = \"about\"\nCategories: [\"开发\"]\nTags: [\"开发\", \"博客\"]\nDescription: \"\"\n\n+++\n正文内容\n\n内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n$ hugo new post/first.md\n\n打开编辑 post/first.md ：\n\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n \n---\n\nHello Hugo\n\n aaa\n bbb\n ccc\n\n 安装皮肤\n\n到 皮肤列表 挑选一个心仪的皮肤，比如你觉得 Hyde 皮肤不错，找到相关的 GitHub 地址，创建目录 themes，在 themes 目录里把皮肤 git clone 下来：\n\n创建 themes 目录\n$ cd themes\n$ git clone https://github.com/spf13/hyde.git\n\n 运行Hugo\n\n在你的站点根目录执行 Hugo 命令进行调试：\n\n$ hugo server --theme=hyde --buildDrafts\n\n（注明：v0.15 版本之后，不再需要使用 --watch 参数了）\n\n浏览器里打开： http://localhost:1313\n\n部署\n\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：qinlicang.github.io`（qinlicang替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n\n$ hugo --theme=hyde --baseUrl=\"http://qinlicang.github.io/\"\n\n（注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成。）\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n$ cd public\n$ git init\n$ git remote add origin https://github.com/coderzh/coderzh.github.io.git\n$ git add -A\n$ git commit -m \"first commit\"\n$ git push -u origin master\n\n浏览器里访问：http://coderzh.github.io/\n\n 本地查看\n\n| 1  | hugo server -D |\n| ---- | ---------------- |\n|      |                  |\n\n加上 -D 参数包含 Draft 的文章，不加话默认不包含Draft的文章",
        "tags": []
    }
]